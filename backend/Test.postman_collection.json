{
	"info": {
		"_postman_id": "a25f23c4-3485-477b-93c2-d4d1e23f595c",
		"name": "Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19523568"
	},
	"item": [
		{
			"name": "/",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000",
					"protocol": "http",
					"host": ["localhost"],
					"port": "3000"
				}
			},
			"response": []
		},
		{
			"name": "/steam/:id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/steam/76561198054518196",
					"protocol": "http",
					"host": ["localhost"],
					"port": "3000",
					"path": ["api", "steam", "76561198054518196"]
				}
			},
			"response": []
		},
		{
			"name": "/steam/:id/friends",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Success field in the response must exist and have a valid value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property('success');\r",
							"    pm.expect(responseData.success).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data array is present and not empty\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array').and.to.have.lengthOf.at.least(1, \"Data array should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Schema is valid\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      success: {\r",
							"        type: \"boolean\"\r",
							"      },\r",
							"      data: {\r",
							"        type: \"array\",\r",
							"        items: {\r",
							"          type: \"object\"\r",
							"        },\r",
							"      }\r",
							"    },\r",
							"    required: [\"success\", \"data\"],\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/steam/76561198100361979/friends",
					"protocol": "http",
					"host": ["localhost"],
					"port": "3000",
					"path": ["api", "steam", "76561198100361979", "friends"]
				}
			},
			"response": []
		},
		{
			"name": "/steam/:id/games",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Success field should exist and be true\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.have.property('success', true);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data array is present and has expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').with.lengthOf(responseData.count);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/steam/76561198100361979/games",
					"protocol": "http",
					"host": ["localhost"],
					"port": "3000",
					"path": ["api", "steam", "76561198100361979", "games"]
				}
			},
			"response": []
		},
		{
			"name": "/steam/games",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('Response has the required fields', function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('success');\r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"})\r",
							"\r",
							"pm.test(\"Data object exists for each game ID\", function () {\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    const gameIds = requestData.appIds;\r",
							"    gameIds.forEach(function(gameId) {\r",
							"        pm.expect(responseData.data[gameId]).to.exist;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    var schema = {\r",
							"        type: 'object',\r",
							"        properties: {\r",
							"            success: { type: 'boolean' },\r",
							"            count: { type: 'number' },\r",
							"            skipped: { type: 'number' },\r",
							"            data: {\r",
							"                type: 'object',\r",
							"                patternProperties: {\r",
							"                    '^[0-9]+$': {\r",
							"                        type: [\r",
							"                            'object',\r",
							"                            'null'\r",
							"                        ],\r",
							"                        properties: {\r",
							"                            appid: { type: 'number' },\r",
							"                            name: { type: 'string' }\r",
							"                        },\r",
							"                        additionalProperties: true\r",
							"                    }\r",
							"                },\r",
							"                additionalProperties: false\r",
							"            }\r",
							"        },\r",
							"        required: [\r",
							"            'success',\r",
							"            'count',\r",
							"            'skipped',\r",
							"            'data'\r",
							"        ],\r",
							"        additionalProperties: false\r",
							"    };\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"appIds\": [\r\n        12110\r\n    ],\r\n    \"liveData\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/steam/games",
					"protocol": "http",
					"host": ["localhost"],
					"port": "3000",
					"path": ["api", "steam", "games"]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "inherit"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [""]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [""]
			}
		}
	]
}
